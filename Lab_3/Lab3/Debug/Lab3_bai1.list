
Lab3_bai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002510  08002510  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002510  08002510  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000003c  08002554  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002554  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c0a  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5b  00000000  00000000  00028c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013383  00000000  00000000  0002b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099e0  00000000  00000000  0003eceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000694ca  00000000  00000000  000486cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b1b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  000b1be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d8 	.word	0x080024d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080024d8 	.word	0x080024d8

0800014c <increase_mode>:

enum ButtonState { BUTTON_RELEASED , BUTTON_PRESSED ,BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState [3] = { BUTTON_RELEASED ,BUTTON_RELEASED , BUTTON_RELEASED };
int time_duration = 0;
int mode = 0;
void increase_mode (){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    if( mode > 4 ) mode = 1;
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <increase_mode+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	dd03      	ble.n	8000160 <increase_mode+0x14>
 8000158:	4b06      	ldr	r3, [pc, #24]	; (8000174 <increase_mode+0x28>)
 800015a:	2201      	movs	r2, #1
 800015c:	601a      	str	r2, [r3, #0]
    else mode ++;
}
 800015e:	e004      	b.n	800016a <increase_mode+0x1e>
    else mode ++;
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <increase_mode+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	3301      	adds	r3, #1
 8000166:	4a03      	ldr	r2, [pc, #12]	; (8000174 <increase_mode+0x28>)
 8000168:	6013      	str	r3, [r2, #0]
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000060 	.word	0x20000060

08000178 <reset_mode>:

void reset_mode (){
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
    // reset time_duration after transform to a mode and reset timer each when we didn ’t complete time ’s run cycle at mode 1
    for ( int i = 0; i < 3 ; i++){
 800017e:	2300      	movs	r3, #0
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	e012      	b.n	80001aa <reset_mode+0x32>
        street2_arr [i] = arr2 [i];
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <reset_mode+0x48>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800018c:	490d      	ldr	r1, [pc, #52]	; (80001c4 <reset_mode+0x4c>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        street1_arr [i] = arr2 [i];
 8000194:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <reset_mode+0x48>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	490a      	ldr	r1, [pc, #40]	; (80001c8 <reset_mode+0x50>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( int i = 0; i < 3 ; i++){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3301      	adds	r3, #1
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	dde9      	ble.n	8000184 <reset_mode+0xc>
    }
    time_duration = 0;
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <reset_mode+0x54>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
}
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000070 	.word	0x20000070
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	20000000 	.word	0x20000000
 80001cc:	2000005c 	.word	0x2000005c

080001d0 <fsm_for_input_processing>:
void fsm_for_input_processing ( void ){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
    for ( int i = 0 ; i < N0_OF_BUTTONS ; i ++) {
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e057      	b.n	800028c <fsm_for_input_processing+0xbc>
        switch ( buttonState [i] ){
 80001dc:	4a2f      	ldr	r2, [pc, #188]	; (800029c <fsm_for_input_processing+0xcc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d03b      	beq.n	8000260 <fsm_for_input_processing+0x90>
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	dc4c      	bgt.n	8000286 <fsm_for_input_processing+0xb6>
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <fsm_for_input_processing+0x26>
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d019      	beq.n	8000228 <fsm_for_input_processing+0x58>
 80001f4:	e047      	b.n	8000286 <fsm_for_input_processing+0xb6>
            case BUTTON_RELEASED :
                if( is_button_pressed (i)){
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f8b6 	bl	800036c <is_button_pressed>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d03a      	beq.n	800027c <fsm_for_input_processing+0xac>
                    buttonState [i] = BUTTON_PRESSED ;
 8000206:	4a25      	ldr	r2, [pc, #148]	; (800029c <fsm_for_input_processing+0xcc>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	2201      	movs	r2, #1
 800020e:	701a      	strb	r2, [r3, #0]
                    // INCREASE VALUE OF PORT A BY ONE UNIT
                    if(i == 0){ // first button .
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d132      	bne.n	800027c <fsm_for_input_processing+0xac>
                        increase_mode ();
 8000216:	f7ff ff99 	bl	800014c <increase_mode>
                        if( mode > 1) reset_mode ();
 800021a:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <fsm_for_input_processing+0xd0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b01      	cmp	r3, #1
 8000220:	dd2c      	ble.n	800027c <fsm_for_input_processing+0xac>
 8000222:	f7ff ffa9 	bl	8000178 <reset_mode>
                    }
                }
                break ;
 8000226:	e029      	b.n	800027c <fsm_for_input_processing+0xac>
            case BUTTON_PRESSED :
                if (! is_button_pressed (i)){
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f89d 	bl	800036c <is_button_pressed>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d105      	bne.n	8000244 <fsm_for_input_processing+0x74>
                    buttonState [i] = BUTTON_RELEASED ;
 8000238:	4a18      	ldr	r2, [pc, #96]	; (800029c <fsm_for_input_processing+0xcc>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
                } else {
                    if( is_button_pressed_1s (i) )
                        buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
                }
                break ;
 8000242:	e01d      	b.n	8000280 <fsm_for_input_processing+0xb0>
                    if( is_button_pressed_1s (i) )
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f8a9 	bl	80003a0 <is_button_pressed_1s>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d015      	beq.n	8000280 <fsm_for_input_processing+0xb0>
                        buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <fsm_for_input_processing+0xcc>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4413      	add	r3, r2
 800025a:	2202      	movs	r2, #2
 800025c:	701a      	strb	r2, [r3, #0]
                break ;
 800025e:	e00f      	b.n	8000280 <fsm_for_input_processing+0xb0>
            case BUTTON_PRESSED_MORE_THAN_1_SECOND :
                if (! is_button_pressed (i)){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f881 	bl	800036c <is_button_pressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <fsm_for_input_processing+0xb4>
                    buttonState [i] = BUTTON_RELEASED ;
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <fsm_for_input_processing+0xcc>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
                }
                // todo
                break ;
 800027a:	e003      	b.n	8000284 <fsm_for_input_processing+0xb4>
                break ;
 800027c:	bf00      	nop
 800027e:	e002      	b.n	8000286 <fsm_for_input_processing+0xb6>
                break ;
 8000280:	bf00      	nop
 8000282:	e000      	b.n	8000286 <fsm_for_input_processing+0xb6>
                break ;
 8000284:	bf00      	nop
    for ( int i = 0 ; i < N0_OF_BUTTONS ; i ++) {
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3301      	adds	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b02      	cmp	r3, #2
 8000290:	dda4      	ble.n	80001dc <fsm_for_input_processing+0xc>
        }
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000058 	.word	0x20000058
 80002a0:	20000060 	.word	0x20000060

080002a4 <button_reading>:
        debounceButtonBuffer2 [i]= BUTTON_IS_RELEASED ;
        buttonBuffer [i]= BUTTON_IS_RELEASED ;
    }
}

void button_reading ( void ){
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
    for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	e046      	b.n	800033e <button_reading+0x9a>
        debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 80002b0:	79fa      	ldrb	r2, [r7, #7]
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4926      	ldr	r1, [pc, #152]	; (8000350 <button_reading+0xac>)
 80002b6:	5c89      	ldrb	r1, [r1, r2]
 80002b8:	4a26      	ldr	r2, [pc, #152]	; (8000354 <button_reading+0xb0>)
 80002ba:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (GPIOA ,
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4a26      	ldr	r2, [pc, #152]	; (8000358 <button_reading+0xb4>)
 80002c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c4:	79fc      	ldrb	r4, [r7, #7]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4824      	ldr	r0, [pc, #144]	; (800035c <button_reading+0xb8>)
 80002ca:	f001 f93f 	bl	800154c <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <button_reading+0xac>)
 80002d4:	551a      	strb	r2, [r3, r4]
        pinButton [i]);
        if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i])
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <button_reading+0xac>)
 80002da:	5cd2      	ldrb	r2, [r2, r3]
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	491d      	ldr	r1, [pc, #116]	; (8000354 <button_reading+0xb0>)
 80002e0:	5ccb      	ldrb	r3, [r1, r3]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d105      	bne.n	80002f2 <button_reading+0x4e>
            buttonBuffer [i] = debounceButtonBuffer1 [i];
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4919      	ldr	r1, [pc, #100]	; (8000350 <button_reading+0xac>)
 80002ec:	5c89      	ldrb	r1, [r1, r2]
 80002ee:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <button_reading+0xbc>)
 80002f0:	54d1      	strb	r1, [r2, r3]
            if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <button_reading+0xbc>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d114      	bne.n	8000326 <button_reading+0x82>
                // if a button is pressed , we start counting
                if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <button_reading+0xc0>)
 8000300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000304:	2b63      	cmp	r3, #99	; 0x63
 8000306:	d809      	bhi.n	800031c <button_reading+0x78>
                    counterForButtonPress1s [i ]++;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a16      	ldr	r2, [pc, #88]	; (8000364 <button_reading+0xc0>)
 800030c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000310:	3201      	adds	r2, #1
 8000312:	b291      	uxth	r1, r2
 8000314:	4a13      	ldr	r2, [pc, #76]	; (8000364 <button_reading+0xc0>)
 8000316:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800031a:	e00d      	b.n	8000338 <button_reading+0x94>
                } else {
                // the flag is turned on when 1 second has passed
                // since the button is pressed .
                flagForButtonPress1s [i] = 1;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <button_reading+0xc4>)
 8000320:	2101      	movs	r1, #1
 8000322:	54d1      	strb	r1, [r2, r3]
 8000324:	e008      	b.n	8000338 <button_reading+0x94>
                // todo
                }
            } else {
                counterForButtonPress1s [i] = 0;
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <button_reading+0xc0>)
 800032a:	2100      	movs	r1, #0
 800032c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                flagForButtonPress1s [i] = 0;
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <button_reading+0xc4>)
 8000334:	2100      	movs	r1, #0
 8000336:	54d1      	strb	r1, [r2, r3]
    for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	3301      	adds	r3, #1
 800033c:	71fb      	strb	r3, [r7, #7]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b02      	cmp	r3, #2
 8000342:	d9b5      	bls.n	80002b0 <button_reading+0xc>
            }
    }
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bd90      	pop	{r4, r7, pc}
 800034e:	bf00      	nop
 8000350:	20000084 	.word	0x20000084
 8000354:	20000088 	.word	0x20000088
 8000358:	20000090 	.word	0x20000090
 800035c:	40010800 	.word	0x40010800
 8000360:	2000008c 	.word	0x2000008c
 8000364:	20000068 	.word	0x20000068
 8000368:	20000064 	.word	0x20000064

0800036c <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d901      	bls.n	8000380 <is_button_pressed+0x14>
 800037c:	2300      	movs	r3, #0
 800037e:	e007      	b.n	8000390 <is_button_pressed+0x24>
    return ( buttonBuffer [ index ] == BUTTON_IS_PRESSED );
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a06      	ldr	r2, [pc, #24]	; (800039c <is_button_pressed+0x30>)
 8000384:	5cd3      	ldrb	r3, [r2, r3]
 8000386:	2b00      	cmp	r3, #0
 8000388:	bf0c      	ite	eq
 800038a:	2301      	moveq	r3, #1
 800038c:	2300      	movne	r3, #0
 800038e:	b2db      	uxtb	r3, r3
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	2000008c 	.word	0x2000008c

080003a0 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s ( unsigned char index ){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0xff;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d901      	bls.n	80003b4 <is_button_pressed_1s+0x14>
 80003b0:	23ff      	movs	r3, #255	; 0xff
 80003b2:	e007      	b.n	80003c4 <is_button_pressed_1s+0x24>
    return ( flagForButtonPress1s [ index ] == 1);
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <is_button_pressed_1s+0x30>)
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	bf0c      	ite	eq
 80003be:	2301      	moveq	r3, #1
 80003c0:	2300      	movne	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000064 	.word	0x20000064

080003d4 <display7SEG>:
int street2_arr [3] = {5 ,2 ,3};
int arr2 [3] = {0 ,0 ,0}; // temp arr


void display7SEG ( int num , GPIO_TypeDef * GPIO1 , uint16_t GPIO_PIN0 ,uint16_t GPIO_PIN1 , uint16_t GPIO_PIN2 , uint16_t GPIO_PIN3 , uint16_t GPIO_PIN4 , uint16_t GPIO_PIN5 , uint16_t GPIO_PIN6 )
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	4611      	mov	r1, r2
 80003e0:	461a      	mov	r2, r3
 80003e2:	460b      	mov	r3, r1
 80003e4:	80fb      	strh	r3, [r7, #6]
 80003e6:	4613      	mov	r3, r2
 80003e8:	80bb      	strh	r3, [r7, #4]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	f200 81c5 	bhi.w	800077c <display7SEG+0x3a8>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <display7SEG+0x24>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000421 	.word	0x08000421
 80003fc:	08000477 	.word	0x08000477
 8000400:	080004cd 	.word	0x080004cd
 8000404:	08000523 	.word	0x08000523
 8000408:	08000579 	.word	0x08000579
 800040c:	080005cf 	.word	0x080005cf
 8000410:	08000625 	.word	0x08000625
 8000414:	0800067b 	.word	0x0800067b
 8000418:	080006d1 	.word	0x080006d1
 800041c:	08000727 	.word	0x08000727
    switch ( num ){
    case 0:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 8000420:	88fb      	ldrh	r3, [r7, #6]
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	68b8      	ldr	r0, [r7, #8]
 8000428:	f001 f8a7 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 800042c:	88bb      	ldrh	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	68b8      	ldr	r0, [r7, #8]
 8000434:	f001 f8a1 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 8000438:	8b3b      	ldrh	r3, [r7, #24]
 800043a:	2200      	movs	r2, #0
 800043c:	4619      	mov	r1, r3
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f001 f89b 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 8000444:	8bbb      	ldrh	r3, [r7, #28]
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	68b8      	ldr	r0, [r7, #8]
 800044c:	f001 f895 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , RESET );
 8000450:	8c3b      	ldrh	r3, [r7, #32]
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	f001 f88f 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 800045c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	68b8      	ldr	r0, [r7, #8]
 8000464:	f001 f889 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , SET );
 8000468:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800046a:	2201      	movs	r2, #1
 800046c:	4619      	mov	r1, r3
 800046e:	68b8      	ldr	r0, [r7, #8]
 8000470:	f001 f883 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000474:	e182      	b.n	800077c <display7SEG+0x3a8>
    case 1:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , SET );
 8000476:	88fb      	ldrh	r3, [r7, #6]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	68b8      	ldr	r0, [r7, #8]
 800047e:	f001 f87c 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 8000482:	88bb      	ldrh	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	68b8      	ldr	r0, [r7, #8]
 800048a:	f001 f876 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 800048e:	8b3b      	ldrh	r3, [r7, #24]
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	68b8      	ldr	r0, [r7, #8]
 8000496:	f001 f870 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , SET );
 800049a:	8bbb      	ldrh	r3, [r7, #28]
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	68b8      	ldr	r0, [r7, #8]
 80004a2:	f001 f86a 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 80004a6:	8c3b      	ldrh	r3, [r7, #32]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	68b8      	ldr	r0, [r7, #8]
 80004ae:	f001 f864 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , SET );
 80004b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	68b8      	ldr	r0, [r7, #8]
 80004ba:	f001 f85e 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , SET );
 80004be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	68b8      	ldr	r0, [r7, #8]
 80004c6:	f001 f858 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 80004ca:	e157      	b.n	800077c <display7SEG+0x3a8>
    case 2:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	2200      	movs	r2, #0
 80004d0:	4619      	mov	r1, r3
 80004d2:	68b8      	ldr	r0, [r7, #8]
 80004d4:	f001 f851 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	68b8      	ldr	r0, [r7, #8]
 80004e0:	f001 f84b 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , SET );
 80004e4:	8b3b      	ldrh	r3, [r7, #24]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f001 f845 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 80004f0:	8bbb      	ldrh	r3, [r7, #28]
 80004f2:	2200      	movs	r2, #0
 80004f4:	4619      	mov	r1, r3
 80004f6:	68b8      	ldr	r0, [r7, #8]
 80004f8:	f001 f83f 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , RESET );
 80004fc:	8c3b      	ldrh	r3, [r7, #32]
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	68b8      	ldr	r0, [r7, #8]
 8000504:	f001 f839 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , SET );
 8000508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	68b8      	ldr	r0, [r7, #8]
 8000510:	f001 f833 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 8000514:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f001 f82d 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000520:	e12c      	b.n	800077c <display7SEG+0x3a8>
    case 3:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	68b8      	ldr	r0, [r7, #8]
 800052a:	f001 f826 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 800052e:	88bb      	ldrh	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	4619      	mov	r1, r3
 8000534:	68b8      	ldr	r0, [r7, #8]
 8000536:	f001 f820 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 800053a:	8b3b      	ldrh	r3, [r7, #24]
 800053c:	2200      	movs	r2, #0
 800053e:	4619      	mov	r1, r3
 8000540:	68b8      	ldr	r0, [r7, #8]
 8000542:	f001 f81a 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 8000546:	8bbb      	ldrh	r3, [r7, #28]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f001 f814 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 8000552:	8c3b      	ldrh	r3, [r7, #32]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	68b8      	ldr	r0, [r7, #8]
 800055a:	f001 f80e 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , SET );
 800055e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000560:	2201      	movs	r2, #1
 8000562:	4619      	mov	r1, r3
 8000564:	68b8      	ldr	r0, [r7, #8]
 8000566:	f001 f808 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 800056a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	68b8      	ldr	r0, [r7, #8]
 8000572:	f001 f802 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000576:	e101      	b.n	800077c <display7SEG+0x3a8>
    case 4:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , SET );
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	2201      	movs	r2, #1
 800057c:	4619      	mov	r1, r3
 800057e:	68b8      	ldr	r0, [r7, #8]
 8000580:	f000 fffb 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 8000584:	88bb      	ldrh	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	68b8      	ldr	r0, [r7, #8]
 800058c:	f000 fff5 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 8000590:	8b3b      	ldrh	r3, [r7, #24]
 8000592:	2200      	movs	r2, #0
 8000594:	4619      	mov	r1, r3
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f000 ffef 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , SET );
 800059c:	8bbb      	ldrh	r3, [r7, #28]
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	68b8      	ldr	r0, [r7, #8]
 80005a4:	f000 ffe9 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 80005a8:	8c3b      	ldrh	r3, [r7, #32]
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	68b8      	ldr	r0, [r7, #8]
 80005b0:	f000 ffe3 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 80005b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005b6:	2200      	movs	r2, #0
 80005b8:	4619      	mov	r1, r3
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f000 ffdd 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 80005c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005c2:	2200      	movs	r2, #0
 80005c4:	4619      	mov	r1, r3
 80005c6:	68b8      	ldr	r0, [r7, #8]
 80005c8:	f000 ffd7 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 80005cc:	e0d6      	b.n	800077c <display7SEG+0x3a8>
    case 5:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	68b8      	ldr	r0, [r7, #8]
 80005d6:	f000 ffd0 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , SET );
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	f000 ffca 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 80005e6:	8b3b      	ldrh	r3, [r7, #24]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f000 ffc4 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 80005f2:	8bbb      	ldrh	r3, [r7, #28]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f000 ffbe 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 80005fe:	8c3b      	ldrh	r3, [r7, #32]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f000 ffb8 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 800060a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	f000 ffb2 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 8000616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	68b8      	ldr	r0, [r7, #8]
 800061e:	f000 ffac 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000622:	e0ab      	b.n	800077c <display7SEG+0x3a8>
    case 6:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f000 ffa5 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , SET );
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	68b8      	ldr	r0, [r7, #8]
 8000638:	f000 ff9f 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 800063c:	8b3b      	ldrh	r3, [r7, #24]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	68b8      	ldr	r0, [r7, #8]
 8000644:	f000 ff99 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 8000648:	8bbb      	ldrh	r3, [r7, #28]
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	68b8      	ldr	r0, [r7, #8]
 8000650:	f000 ff93 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , RESET );
 8000654:	8c3b      	ldrh	r3, [r7, #32]
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f000 ff8d 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 8000660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f000 ff87 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 800066c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	68b8      	ldr	r0, [r7, #8]
 8000674:	f000 ff81 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000678:	e080      	b.n	800077c <display7SEG+0x3a8>
    case 7:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	68b8      	ldr	r0, [r7, #8]
 8000682:	f000 ff7a 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	68b8      	ldr	r0, [r7, #8]
 800068e:	f000 ff74 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 8000692:	8b3b      	ldrh	r3, [r7, #24]
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f000 ff6e 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , SET );
 800069e:	8bbb      	ldrh	r3, [r7, #28]
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f000 ff68 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 80006aa:	8c3b      	ldrh	r3, [r7, #32]
 80006ac:	2201      	movs	r2, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	68b8      	ldr	r0, [r7, #8]
 80006b2:	f000 ff62 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , SET );
 80006b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f000 ff5c 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , SET );
 80006c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f000 ff56 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 80006ce:	e055      	b.n	800077c <display7SEG+0x3a8>
    case 8:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f000 ff4f 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	4619      	mov	r1, r3
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f000 ff49 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 80006e8:	8b3b      	ldrh	r3, [r7, #24]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f000 ff43 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 80006f4:	8bbb      	ldrh	r3, [r7, #28]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	68b8      	ldr	r0, [r7, #8]
 80006fc:	f000 ff3d 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , RESET );
 8000700:	8c3b      	ldrh	r3, [r7, #32]
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	68b8      	ldr	r0, [r7, #8]
 8000708:	f000 ff37 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 800070c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	68b8      	ldr	r0, [r7, #8]
 8000714:	f000 ff31 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 8000718:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	68b8      	ldr	r0, [r7, #8]
 8000720:	f000 ff2b 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000724:	e02a      	b.n	800077c <display7SEG+0x3a8>
    case 9:
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN0 , RESET );
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f000 ff24 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN1 , RESET );
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	68b8      	ldr	r0, [r7, #8]
 800073a:	f000 ff1e 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN2 , RESET );
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	68b8      	ldr	r0, [r7, #8]
 8000746:	f000 ff18 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN3 , RESET );
 800074a:	8bbb      	ldrh	r3, [r7, #28]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f000 ff12 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN4 , SET );
 8000756:	8c3b      	ldrh	r3, [r7, #32]
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f000 ff0c 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN5 , RESET );
 8000762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f000 ff06 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIO1 , GPIO_PIN6 , RESET );
 800076e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	68b8      	ldr	r0, [r7, #8]
 8000776:	f000 ff00 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 800077a:	bf00      	nop
    }
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <traffic_light>:

void traffic_light ( uint16_t GPIO_Pin1 , uint16_t GPIO_Pin2 , uint16_t GPIO_Pin3 , int count , int arr []){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4603      	mov	r3, r0
 800078e:	81fb      	strh	r3, [r7, #14]
 8000790:	460b      	mov	r3, r1
 8000792:	81bb      	strh	r3, [r7, #12]
 8000794:	4613      	mov	r3, r2
 8000796:	817b      	strh	r3, [r7, #10]
    switch ( count ){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d02f      	beq.n	80007fe <traffic_light+0x7a>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	dc3f      	bgt.n	8000824 <traffic_light+0xa0>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <traffic_light+0x2e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d013      	beq.n	80007d8 <traffic_light+0x54>
 80007b0:	e038      	b.n	8000824 <traffic_light+0xa0>
    case 0:
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin1 , RESET );
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4820      	ldr	r0, [pc, #128]	; (800083c <traffic_light+0xb8>)
 80007ba:	f000 fede 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin2 , SET);
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	481d      	ldr	r0, [pc, #116]	; (800083c <traffic_light+0xb8>)
 80007c6:	f000 fed8 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin3 , SET);
 80007ca:	897b      	ldrh	r3, [r7, #10]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <traffic_light+0xb8>)
 80007d2:	f000 fed2 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 80007d6:	e025      	b.n	8000824 <traffic_light+0xa0>
    case 1:
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin1 , SET);
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4817      	ldr	r0, [pc, #92]	; (800083c <traffic_light+0xb8>)
 80007e0:	f000 fecb 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin2 , SET);
 80007e4:	89bb      	ldrh	r3, [r7, #12]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <traffic_light+0xb8>)
 80007ec:	f000 fec5 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin3 , RESET );
 80007f0:	897b      	ldrh	r3, [r7, #10]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <traffic_light+0xb8>)
 80007f8:	f000 febf 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 80007fc:	e012      	b.n	8000824 <traffic_light+0xa0>
    case 2:
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin1 , SET);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <traffic_light+0xb8>)
 8000806:	f000 feb8 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin2 , RESET );
 800080a:	89bb      	ldrh	r3, [r7, #12]
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <traffic_light+0xb8>)
 8000812:	f000 feb2 	bl	800157a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin (GPIOB , GPIO_Pin3 , SET);
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	2201      	movs	r2, #1
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <traffic_light+0xb8>)
 800081e:	f000 feac 	bl	800157a <HAL_GPIO_WritePin>
        break ;
 8000822:	bf00      	nop
    }
    arr [ count ]--;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4413      	add	r3, r2
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	3a01      	subs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010c00 	.word	0x40010c00

08000840 <traffic_light_4>:
void traffic_light_4 (int count_vled , int count_hled ){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
//////////////////////////// HORIZONTAL LEDS ////////////////////////////
    traffic_light ( GPIO_PIN_7 , GPIO_PIN_8 , GPIO_PIN_9 , count_hled , street2_arr );
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <traffic_light_4+0x3c>)
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	2080      	movs	r0, #128	; 0x80
 800085a:	f7ff ff93 	bl	8000784 <traffic_light>

    ///////////////////////// VERTICAL LEDS ///////////////////////
    traffic_light ( GPIO_PIN_10 , GPIO_PIN_11 , GPIO_PIN_12 , count_vled , street1_arr );
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <traffic_light_4+0x40>)
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000870:	f7ff ff88 	bl	8000784 <traffic_light>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000000c 	.word	0x2000000c
 8000880:	20000000 	.word	0x20000000

08000884 <mode_1>:

////////////////////// MODE 1/////////////////////////////////////
int count_vled = 0;
int count_hled = 2;
void mode_1 (){
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af06      	add	r7, sp, #24
    if( count_vled >= 3) count_vled = 0;
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <mode_1+0x124>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	dd02      	ble.n	8000898 <mode_1+0x14>
 8000892:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <mode_1+0x124>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
    if( count_hled < 0) count_hled = 2;
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <mode_1+0x128>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	da02      	bge.n	80008a6 <mode_1+0x22>
 80008a0:	4b42      	ldr	r3, [pc, #264]	; (80009ac <mode_1+0x128>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
        traffic_light_4 ( count_vled , count_hled );
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <mode_1+0x124>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a40      	ldr	r2, [pc, #256]	; (80009ac <mode_1+0x128>)
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ffc5 	bl	8000840 <traffic_light_4>
        display7SEG ( street1_arr [ count_vled ], GPIOB , GPIO_PIN_1 , GPIO_PIN_2 , GPIO_PIN_3 , GPIO_PIN_4 , GPIO_PIN_5 , GPIO_PIN_6, GPIO_PIN_7 );
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <mode_1+0x124>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a3d      	ldr	r2, [pc, #244]	; (80009b0 <mode_1+0x12c>)
 80008bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	9304      	str	r3, [sp, #16]
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	9303      	str	r3, [sp, #12]
 80008c8:	2320      	movs	r3, #32
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2310      	movs	r3, #16
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	2308      	movs	r3, #8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2304      	movs	r3, #4
 80008d6:	2202      	movs	r2, #2
 80008d8:	4936      	ldr	r1, [pc, #216]	; (80009b4 <mode_1+0x130>)
 80008da:	f7ff fd7b 	bl	80003d4 <display7SEG>
        display7SEG ( street2_arr [ count_hled ], GPIOA ,GPIO_PIN_7 , GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10 , GPIO_PIN_11 , GPIO_PIN_12 , GPIO_PIN_13 );
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <mode_1+0x128>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a35      	ldr	r2, [pc, #212]	; (80009b8 <mode_1+0x134>)
 80008e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	9304      	str	r3, [sp, #16]
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	9303      	str	r3, [sp, #12]
 80008f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	492b      	ldr	r1, [pc, #172]	; (80009bc <mode_1+0x138>)
 800090e:	f7ff fd61 	bl	80003d4 <display7SEG>
        display7SEG ( street2_arr [ count_hled ], GPIOB , GPIO_PIN_8 , GPIO_PIN_9 , GPIO_PIN_10 , GPIO_PIN_11 , GPIO_PIN_12 , GPIO_PIN_13 , GPIO_PIN_14 );
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <mode_1+0x128>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <mode_1+0x134>)
 8000918:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800091c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000920:	9304      	str	r3, [sp, #16]
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	9303      	str	r3, [sp, #12]
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000942:	491c      	ldr	r1, [pc, #112]	; (80009b4 <mode_1+0x130>)
 8000944:	f7ff fd46 	bl	80003d4 <display7SEG>
    if( street1_arr [ count_vled ] <= 1){
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <mode_1+0x124>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <mode_1+0x12c>)
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	2b01      	cmp	r3, #1
 8000954:	dc0e      	bgt.n	8000974 <mode_1+0xf0>
        street1_arr [ count_vled ] = arr2 [ count_vled ];
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <mode_1+0x124>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <mode_1+0x124>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4918      	ldr	r1, [pc, #96]	; (80009c0 <mode_1+0x13c>)
 8000960:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000964:	4912      	ldr	r1, [pc, #72]	; (80009b0 <mode_1+0x12c>)
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        count_vled ++;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <mode_1+0x124>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <mode_1+0x124>)
 8000972:	6013      	str	r3, [r2, #0]
    }
    if( street2_arr [ count_hled ] <= 1){
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <mode_1+0x128>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <mode_1+0x134>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	2b01      	cmp	r3, #1
 8000980:	dc0e      	bgt.n	80009a0 <mode_1+0x11c>
        street2_arr [ count_hled ] = arr2 [ count_hled ];
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <mode_1+0x128>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <mode_1+0x128>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <mode_1+0x13c>)
 800098c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000990:	4909      	ldr	r1, [pc, #36]	; (80009b8 <mode_1+0x134>)
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        count_hled --;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <mode_1+0x128>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <mode_1+0x128>)
 800099e:	6013      	str	r3, [r2, #0]
    }
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20000000 	.word	0x20000000
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	40010800 	.word	0x40010800
 80009c0:	20000070 	.word	0x20000070

080009c4 <mode_2>:

//////////////////////// MODE 2 //////////////////////////////
int counter_mode2 = 1;
void mode_2 (){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af06      	add	r7, sp, #24
    if( counter_mode2 == 1){
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <mode_2+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <mode_2+0x20>
        HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 | GPIO_PIN_6 , RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2148      	movs	r1, #72	; 0x48
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <mode_2+0x64>)
 80009d8:	f000 fdcf 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode2 = 2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <mode_2+0x60>)
 80009de:	2202      	movs	r2, #2
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <mode_2+0x30>
    }
    else {
        HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3 | GPIO_PIN_6 , SET );
 80009e4:	2201      	movs	r2, #1
 80009e6:	2148      	movs	r1, #72	; 0x48
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <mode_2+0x64>)
 80009ea:	f000 fdc6 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode2 = 1;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <mode_2+0x60>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
    }
    HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 , SET );
 80009f4:	2201      	movs	r2, #1
 80009f6:	2136      	movs	r1, #54	; 0x36
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <mode_2+0x64>)
 80009fa:	f000 fdbe 	bl	800157a <HAL_GPIO_WritePin>
    display7SEG (2, GPIOB , GPIO_PIN_1 , GPIO_PIN_2 , GPIO_PIN_3 , GPIO_PIN_4 , GPIO_PIN_5 , GPIO_PIN_6, GPIO_PIN_7 );
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	9304      	str	r3, [sp, #16]
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	9303      	str	r3, [sp, #12]
 8000a06:	2320      	movs	r3, #32
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	2308      	movs	r3, #8
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2304      	movs	r3, #4
 8000a14:	2202      	movs	r2, #2
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <mode_2+0x68>)
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fcdb 	bl	80003d4 <display7SEG>
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000001c 	.word	0x2000001c
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <mode_3>:

// //////////// MODE 3///////////////////
int counter_mode3 = 1;
void mode_3 (){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af06      	add	r7, sp, #24
    if( counter_mode3 == 1){
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <mode_3+0x60>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d108      	bne.n	8000a50 <mode_3+0x20>
        HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 | GPIO_PIN_5 , RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2124      	movs	r1, #36	; 0x24
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <mode_3+0x64>)
 8000a44:	f000 fd99 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode3 = 2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <mode_3+0x60>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e007      	b.n	8000a60 <mode_3+0x30>
    }
    else {
        HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 | GPIO_PIN_5 , SET );
 8000a50:	2201      	movs	r2, #1
 8000a52:	2124      	movs	r1, #36	; 0x24
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <mode_3+0x64>)
 8000a56:	f000 fd90 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode3 = 1;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <mode_3+0x60>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
    }
    HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 , SET );
 8000a60:	2201      	movs	r2, #1
 8000a62:	215a      	movs	r1, #90	; 0x5a
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <mode_3+0x64>)
 8000a66:	f000 fd88 	bl	800157a <HAL_GPIO_WritePin>
    display7SEG (3, GPIOB , GPIO_PIN_1 , GPIO_PIN_2 , GPIO_PIN_3 , GPIO_PIN_4 , GPIO_PIN_5 , GPIO_PIN_6, GPIO_PIN_7 );
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	9304      	str	r3, [sp, #16]
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	9303      	str	r3, [sp, #12]
 8000a72:	2320      	movs	r3, #32
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2310      	movs	r3, #16
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2304      	movs	r3, #4
 8000a80:	2202      	movs	r2, #2
 8000a82:	4905      	ldr	r1, [pc, #20]	; (8000a98 <mode_3+0x68>)
 8000a84:	2003      	movs	r0, #3
 8000a86:	f7ff fca5 	bl	80003d4 <display7SEG>
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000020 	.word	0x20000020
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <mode_4>:

// ///////////// MODE 4////////////////
int counter_mode4 = 1;
void mode_4 (){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af06      	add	r7, sp, #24
    if( counter_mode4 == 1){
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <mode_4+0x64>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <mode_4+0x20>
        HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 | GPIO_PIN_4 , RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2112      	movs	r1, #18
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <mode_4+0x68>)
 8000ab0:	f000 fd63 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode4 = 2;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <mode_4+0x64>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <mode_4+0x30>
    }
    else {
        HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 | GPIO_PIN_4 , SET );
 8000abc:	2201      	movs	r2, #1
 8000abe:	2112      	movs	r1, #18
 8000ac0:	4810      	ldr	r0, [pc, #64]	; (8000b04 <mode_4+0x68>)
 8000ac2:	f000 fd5a 	bl	800157a <HAL_GPIO_WritePin>
        counter_mode4 = 1;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <mode_4+0x64>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
    }
    HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 , SET );
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 51b4 	mov.w	r1, #5760	; 0x1680
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <mode_4+0x68>)
 8000ad4:	f000 fd51 	bl	800157a <HAL_GPIO_WritePin>
    display7SEG (4, GPIOB , GPIO_PIN_1 , GPIO_PIN_2 , GPIO_PIN_3 , GPIO_PIN_4 , GPIO_PIN_5 , GPIO_PIN_6 , GPIO_PIN_7);
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	9304      	str	r3, [sp, #16]
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	9303      	str	r3, [sp, #12]
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2308      	movs	r3, #8
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	2202      	movs	r2, #2
 8000af0:	4905      	ldr	r1, [pc, #20]	; (8000b08 <mode_4+0x6c>)
 8000af2:	2004      	movs	r0, #4
 8000af4:	f7ff fc6e 	bl	80003d4 <display7SEG>
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000024 	.word	0x20000024
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fa32 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f80c 	bl	8000b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <main+0x20>)
 8000b1a:	f001 f95a 	bl	8001dd2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f000 f88f 	bl	8000c40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b22:	f000 f841 	bl	8000ba8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 8000b26:	f7ff fb53 	bl	80001d0 <fsm_for_input_processing>
 8000b2a:	e7fc      	b.n	8000b26 <main+0x1a>
 8000b2c:	20000098 	.word	0x20000098

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fcc2 	bl	80024c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fd20 	bl	80015ac <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b72:	f000 f8d5 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 ff8c 	bl	8001aac <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f8c1 	bl	8000d20 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bdc:	2209      	movs	r2, #9
 8000bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bee:	f001 f8c5 	bl	8001d7c <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf8:	f000 f892 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c0a:	f001 fa0d 	bl	8002028 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 f884 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c26:	f001 fbd5 	bl	80023d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f876 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000098 	.word	0x20000098

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_GPIO_Init+0xd4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000ca2:	481d      	ldr	r0, [pc, #116]	; (8000d18 <MX_GPIO_Init+0xd8>)
 8000ca4:	f000 fc69 	bl	800157a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <MX_GPIO_Init+0xdc>)
 8000cb0:	f000 fc63 	bl	800157a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA10
                           PA11 PA12 PA13 PA14
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cb4:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000cb8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MX_GPIO_Init+0xd8>)
 8000cce:	f000 fac3 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000cd2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0xd8>)
 8000ce8:	f000 fab6 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000cec:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000cf0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_GPIO_Init+0xdc>)
 8000d06:	f000 faa7 	bl	8001258 <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d113      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201c      	movs	r0, #28
 8000dc0:	f000 fa13 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc4:	201c      	movs	r0, #28
 8000dc6:	f000 fa2c 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f8f1 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM2_IRQHandler+0x10>)
 8000e2e:	f000 fff3 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000098 	.word	0x20000098

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <SystemInit+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <SystemInit+0x5c>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <SystemInit+0x5c>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4911      	ldr	r1, [pc, #68]	; (8000e98 <SystemInit+0x5c>)
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <SystemInit+0x60>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <SystemInit+0x5c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <SystemInit+0x5c>)
 8000e5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <SystemInit+0x5c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SystemInit+0x5c>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <SystemInit+0x5c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <SystemInit+0x5c>)
 8000e7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SystemInit+0x5c>)
 8000e82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SystemInit+0x64>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	f8ff0000 	.word	0xf8ff0000
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
#include "timer.h"
#include "led_display.h"
#include "input_reading.h"
int count = 0;
int mode_button ;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    count --;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000eb4:	6013      	str	r3, [r2, #0]
    button_reading();
 8000eb6:	f7ff f9f5 	bl	80002a4 <button_reading>
    //mode_button = Mode();
    if( count <= 0){
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dc27      	bgt.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x6e>
        if( mode_button == 1){
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x32>
            mode_1 ();
 8000eca:	f7ff fcdb 	bl	8000884 <mode_1>
            count = count_1s ;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ed4:	6013      	str	r3, [r2, #0]
        }
        if( mode_button == 2){
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d105      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x46>
            mode_2 ();
 8000ede:	f7ff fd71 	bl	80009c4 <mode_2>
            count = count_500ms ;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ee8:	6013      	str	r3, [r2, #0]
        }
        if( mode_button == 3){
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d105      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x5a>
            mode_3 ();
 8000ef2:	f7ff fd9d 	bl	8000a30 <mode_3>
            count = count_500ms ;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000efc:	6013      	str	r3, [r2, #0]
        }
        if( mode_button == 4){
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d105      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x6e>
            mode_4 ();
 8000f06:	f7ff fdc9 	bl	8000a9c <mode_4>
            count = count_500ms ;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f10:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000080 	.word	0x20000080
 8000f20:	200000d8 	.word	0x200000d8
 8000f24:	2000002c 	.word	0x2000002c
 8000f28:	20000030 	.word	0x20000030

08000f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f38:	480a      	ldr	r0, [pc, #40]	; (8000f64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f48:	f842 3b04 	str.w	r3, [r2], #4

08000f4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f52:	f7ff ff73 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f001 fa93 	bl	8002480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff fdd7 	bl	8000b0c <main>
  bx lr
 8000f5e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f60:	08002518 	.word	0x08002518
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f68:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 8000f6c:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8000f70:	200000e0 	.word	0x200000e0

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f923 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff feca 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f93b 	bl	800123e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f903 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	20000038 	.word	0x20000038
 8001000:	20000034 	.word	0x20000034

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000038 	.word	0x20000038
 8001024:	200000dc 	.word	0x200000dc

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	200000dc 	.word	0x200000dc

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4906      	ldr	r1, [pc, #24]	; (80010d4 <__NVIC_EnableIRQ+0x34>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff ff90 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff2d 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff42 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff90 	bl	800112c <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5f 	bl	80010d8 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff35 	bl	80010a0 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e148      	b.n	80014fe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800126c:	2201      	movs	r2, #1
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8137 	bne.w	80014f8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4aa3      	ldr	r2, [pc, #652]	; (800151c <HAL_GPIO_Init+0x2c4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d05e      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 8001294:	4aa1      	ldr	r2, [pc, #644]	; (800151c <HAL_GPIO_Init+0x2c4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d875      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 800129a:	4aa1      	ldr	r2, [pc, #644]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d058      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012a0:	4a9f      	ldr	r2, [pc, #636]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d86f      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012a6:	4a9f      	ldr	r2, [pc, #636]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d052      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012ac:	4a9d      	ldr	r2, [pc, #628]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d869      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012b2:	4a9d      	ldr	r2, [pc, #628]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d04c      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012b8:	4a9b      	ldr	r2, [pc, #620]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d863      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012be:	4a9b      	ldr	r2, [pc, #620]	; (800152c <HAL_GPIO_Init+0x2d4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d046      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012c4:	4a99      	ldr	r2, [pc, #612]	; (800152c <HAL_GPIO_Init+0x2d4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d85d      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d82a      	bhi.n	8001324 <HAL_GPIO_Init+0xcc>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d859      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <HAL_GPIO_Init+0x80>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	08001353 	.word	0x08001353
 80012dc:	0800132d 	.word	0x0800132d
 80012e0:	0800133f 	.word	0x0800133f
 80012e4:	08001381 	.word	0x08001381
 80012e8:	08001387 	.word	0x08001387
 80012ec:	08001387 	.word	0x08001387
 80012f0:	08001387 	.word	0x08001387
 80012f4:	08001387 	.word	0x08001387
 80012f8:	08001387 	.word	0x08001387
 80012fc:	08001387 	.word	0x08001387
 8001300:	08001387 	.word	0x08001387
 8001304:	08001387 	.word	0x08001387
 8001308:	08001387 	.word	0x08001387
 800130c:	08001387 	.word	0x08001387
 8001310:	08001387 	.word	0x08001387
 8001314:	08001387 	.word	0x08001387
 8001318:	08001387 	.word	0x08001387
 800131c:	08001335 	.word	0x08001335
 8001320:	08001349 	.word	0x08001349
 8001324:	4a82      	ldr	r2, [pc, #520]	; (8001530 <HAL_GPIO_Init+0x2d8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e02c      	b.n	8001386 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e029      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	3304      	adds	r3, #4
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e024      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	3308      	adds	r3, #8
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e01f      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	330c      	adds	r3, #12
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e01a      	b.n	8001388 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135a:	2304      	movs	r3, #4
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e013      	b.n	8001388 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
          break;
 8001372:	e009      	b.n	8001388 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	615a      	str	r2, [r3, #20]
          break;
 800137e:	e003      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x130>
          break;
 8001386:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d801      	bhi.n	8001392 <HAL_GPIO_Init+0x13a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_Init+0x13e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d802      	bhi.n	80013a4 <HAL_GPIO_Init+0x14c>
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x152>
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3b08      	subs	r3, #8
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	210f      	movs	r1, #15
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	6a39      	ldr	r1, [r7, #32]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8090 	beq.w	80014f8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f0:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_GPIO_Init+0x2e0>)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2e4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00d      	beq.n	8001438 <HAL_GPIO_Init+0x1e0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2e8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_GPIO_Init+0x2ec>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_GPIO_Init+0x1d8>
 800142c:	2302      	movs	r3, #2
 800142e:	e004      	b.n	800143a <HAL_GPIO_Init+0x1e2>
 8001430:	2303      	movs	r3, #3
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0x1e2>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_Init+0x1e2>
 8001438:	2300      	movs	r3, #0
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144a:	493b      	ldr	r1, [pc, #236]	; (8001538 <HAL_GPIO_Init+0x2e0>)
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001472:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4933      	ldr	r1, [pc, #204]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	492d      	ldr	r1, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4929      	ldr	r1, [pc, #164]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	4923      	ldr	r1, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	491f      	ldr	r1, [pc, #124]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	4919      	ldr	r1, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	60cb      	str	r3, [r1, #12]
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4915      	ldr	r1, [pc, #84]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	3301      	adds	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	f47f aeaf 	bne.w	800126c <HAL_GPIO_Init+0x14>
  }
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	372c      	adds	r7, #44	; 0x2c
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	10320000 	.word	0x10320000
 8001520:	10310000 	.word	0x10310000
 8001524:	10220000 	.word	0x10220000
 8001528:	10210000 	.word	0x10210000
 800152c:	10120000 	.word	0x10120000
 8001530:	10110000 	.word	0x10110000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800158a:	787b      	ldrb	r3, [r7, #1]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001590:	887a      	ldrh	r2, [r7, #2]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e26c      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015cc:	4b92      	ldr	r3, [pc, #584]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d8:	4b8f      	ldr	r3, [pc, #572]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
 80015e4:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b89      	ldr	r3, [pc, #548]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x12c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d168      	bne.n	80016d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e246      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x76>
 8001614:	4b80      	ldr	r3, [pc, #512]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e02e      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b78      	ldr	r3, [pc, #480]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a77      	ldr	r2, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0xbc>
 800164e:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a71      	ldr	r2, [pc, #452]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0xd4>
 8001668:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a67      	ldr	r2, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fcce 	bl	8001028 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fcca 	bl	8001028 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1fa      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0xe4>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fcba 	bl	8001028 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fcb6 	bl	8001028 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1e6      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x10c>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d063      	beq.n	80017ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x18c>
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x176>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1ba      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4939      	ldr	r1, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e03a      	b.n	80017ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fc6f 	bl	8001028 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fc6b 	bl	8001028 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e19b      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x270>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fc4e 	bl	8001028 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fc4a 	bl	8001028 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e17a      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03a      	beq.n	8001830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d019      	beq.n	80017f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCC_OscConfig+0x274>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fc2e 	bl	8001028 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff fc2a 	bl	8001028 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e15a      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 faa6 	bl	8001d40 <RCC_Delay>
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_OscConfig+0x274>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fc14 	bl	8001028 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001802:	e00f      	b.n	8001824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fc10 	bl	8001028 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d908      	bls.n	8001824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e140      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	42420000 	.word	0x42420000
 8001820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b9e      	ldr	r3, [pc, #632]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e9      	bne.n	8001804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a6 	beq.w	800198a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b97      	ldr	r3, [pc, #604]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b94      	ldr	r3, [pc, #592]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a93      	ldr	r2, [pc, #588]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b91      	ldr	r3, [pc, #580]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b8b      	ldr	r3, [pc, #556]	; (8001aa4 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a8a      	ldr	r2, [pc, #552]	; (8001aa4 <HAL_RCC_OscConfig+0x4f8>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fbd1 	bl	8001028 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fbcd 	bl	8001028 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b64      	cmp	r3, #100	; 0x64
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0fd      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x4f8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x312>
 80018b0:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a7a      	ldr	r2, [pc, #488]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	e02d      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x334>
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a75      	ldr	r2, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	e01c      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x356>
 80018e8:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a6c      	ldr	r2, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a69      	ldr	r2, [pc, #420]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x36e>
 8001902:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a66      	ldr	r2, [pc, #408]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a63      	ldr	r2, [pc, #396]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d015      	beq.n	800194e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb81 	bl	8001028 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff fb7d 	bl	8001028 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0ab      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ee      	beq.n	800192a <HAL_RCC_OscConfig+0x37e>
 800194c:	e014      	b.n	8001978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fb6b 	bl	8001028 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff fb67 	bl	8001028 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e095      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ee      	bne.n	8001956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8081 	beq.w	8001a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001994:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d061      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d146      	bne.n	8001a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x4fc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fb3b 	bl	8001028 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff fb37 	bl	8001028 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e067      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a19      	ldr	r1, [r3, #32]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	430b      	orrs	r3, r1
 8001a02:	4927      	ldr	r1, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x4fc>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb0b 	bl	8001028 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fb07 	bl	8001028 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e037      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x46a>
 8001a34:	e02f      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_RCC_OscConfig+0x4fc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff faf4 	bl	8001028 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff faf0 	bl	8001028 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e020      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x498>
 8001a62:	e018      	b.n	8001a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e013      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	42420060 	.word	0x42420060

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0d0      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b67      	ldr	r3, [pc, #412]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4965      	ldr	r1, [pc, #404]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d040      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d115      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e073      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06b      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4936      	ldr	r1, [pc, #216]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa44 	bl	8001028 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa40 	bl	8001028 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e053      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d210      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4922      	ldr	r1, [pc, #136]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f821 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1cc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1d0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9a2 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08002500 	.word	0x08002500
 8001c78:	20000028 	.word	0x20000028
 8001c7c:	20000034 	.word	0x20000034

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b490      	push	{r4, r7}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c88:	1d3c      	adds	r4, r7, #4
 8001c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c90:	f240 2301 	movw	r3, #513	; 0x201
 8001c94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001caa:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d002      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cbe:	e02d      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	0c5b      	lsrs	r3, r3, #17
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfe:	fb02 f203 	mul.w	r2, r2, r3
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e004      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	623b      	str	r3, [r7, #32]
      break;
 8001d1a:	e002      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1e:	623b      	str	r3, [r7, #32]
      break;
 8001d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc90      	pop	{r4, r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	080024f0 	.word	0x080024f0
 8001d34:	40021000 	.word	0x40021000
 8001d38:	007a1200 	.word	0x007a1200
 8001d3c:	003d0900 	.word	0x003d0900

08001d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <RCC_Delay+0x34>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <RCC_Delay+0x38>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a5b      	lsrs	r3, r3, #9
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d5c:	bf00      	nop
  }
  while (Delay --);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f9      	bne.n	8001d5c <RCC_Delay+0x1c>
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000028 	.word	0x20000028
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01d      	b.n	8001dca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fff4 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 fa1c 	bl	80021f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0202 	mvn.w	r2, #2
 8001e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f9b1 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f9a4 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f9b3 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0204 	mvn.w	r2, #4
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f987 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f97a 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f989 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0208 	mvn.w	r2, #8
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f95d 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f950 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f95f 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0210 	mvn.w	r2, #16
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2208      	movs	r2, #8
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f933 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f926 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f935 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10e      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0201 	mvn.w	r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe ff84 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	2b80      	cmp	r3, #128	; 0x80
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa53 	bl	800246e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	2b40      	cmp	r3, #64	; 0x40
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8f9 	bl	80021e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b20      	cmp	r3, #32
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0220 	mvn.w	r2, #32
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa1e 	bl	800245c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_TIM_ConfigClockSource+0x18>
 800203c:	2302      	movs	r3, #2
 800203e:	e0b3      	b.n	80021a8 <HAL_TIM_ConfigClockSource+0x180>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800205e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002078:	d03e      	beq.n	80020f8 <HAL_TIM_ConfigClockSource+0xd0>
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	f200 8087 	bhi.w	8002190 <HAL_TIM_ConfigClockSource+0x168>
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002086:	f000 8085 	beq.w	8002194 <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	d87f      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 8002090:	2b70      	cmp	r3, #112	; 0x70
 8002092:	d01a      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xa2>
 8002094:	2b70      	cmp	r3, #112	; 0x70
 8002096:	d87b      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 8002098:	2b60      	cmp	r3, #96	; 0x60
 800209a:	d050      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x116>
 800209c:	2b60      	cmp	r3, #96	; 0x60
 800209e:	d877      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 80020a0:	2b50      	cmp	r3, #80	; 0x50
 80020a2:	d03c      	beq.n	800211e <HAL_TIM_ConfigClockSource+0xf6>
 80020a4:	2b50      	cmp	r3, #80	; 0x50
 80020a6:	d873      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d058      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x136>
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d86f      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 80020b0:	2b30      	cmp	r3, #48	; 0x30
 80020b2:	d064      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x156>
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d86b      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d060      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x156>
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d867      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05c      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x156>
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d05a      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020c8:	e062      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f000 f95c 	bl	8002396 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	609a      	str	r2, [r3, #8]
      break;
 80020f6:	e04e      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f000 f945 	bl	8002396 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211a:	609a      	str	r2, [r3, #8]
      break;
 800211c:	e03b      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	461a      	mov	r2, r3
 800212c:	f000 f8bc 	bl	80022a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2150      	movs	r1, #80	; 0x50
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f913 	bl	8002362 <TIM_ITRx_SetConfig>
      break;
 800213c:	e02b      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f000 f8da 	bl	8002304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2160      	movs	r1, #96	; 0x60
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f903 	bl	8002362 <TIM_ITRx_SetConfig>
      break;
 800215c:	e01b      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f000 f89c 	bl	80022a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8f3 	bl	8002362 <TIM_ITRx_SetConfig>
      break;
 800217c:	e00b      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f000 f8ea 	bl	8002362 <TIM_ITRx_SetConfig>
      break;
 800218e:	e002      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <TIM_Base_SetConfig+0xa8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <TIM_Base_SetConfig+0x28>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d003      	beq.n	8002220 <TIM_Base_SetConfig+0x28>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <TIM_Base_SetConfig+0xac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d108      	bne.n	8002232 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <TIM_Base_SetConfig+0xa8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x52>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x52>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <TIM_Base_SetConfig+0xac>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <TIM_Base_SetConfig+0xa8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40000400 	.word	0x40000400

080022a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f023 0201 	bic.w	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f023 030a 	bic.w	r3, r3, #10
 80022e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	621a      	str	r2, [r3, #32]
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f023 0210 	bic.w	r2, r3, #16
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800232e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	621a      	str	r2, [r3, #32]
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	f043 0307 	orr.w	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002396:	b480      	push	{r7}
 8002398:	b087      	sub	sp, #28
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4313      	orrs	r3, r2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	609a      	str	r2, [r3, #8]
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e032      	b.n	8002452 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4313      	orrs	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <__libc_init_array>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	2600      	movs	r6, #0
 8002484:	4d0c      	ldr	r5, [pc, #48]	; (80024b8 <__libc_init_array+0x38>)
 8002486:	4c0d      	ldr	r4, [pc, #52]	; (80024bc <__libc_init_array+0x3c>)
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	42a6      	cmp	r6, r4
 800248e:	d109      	bne.n	80024a4 <__libc_init_array+0x24>
 8002490:	f000 f822 	bl	80024d8 <_init>
 8002494:	2600      	movs	r6, #0
 8002496:	4d0a      	ldr	r5, [pc, #40]	; (80024c0 <__libc_init_array+0x40>)
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <__libc_init_array+0x44>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	42a6      	cmp	r6, r4
 80024a0:	d105      	bne.n	80024ae <__libc_init_array+0x2e>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a8:	4798      	blx	r3
 80024aa:	3601      	adds	r6, #1
 80024ac:	e7ee      	b.n	800248c <__libc_init_array+0xc>
 80024ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b2:	4798      	blx	r3
 80024b4:	3601      	adds	r6, #1
 80024b6:	e7f2      	b.n	800249e <__libc_init_array+0x1e>
 80024b8:	08002510 	.word	0x08002510
 80024bc:	08002510 	.word	0x08002510
 80024c0:	08002510 	.word	0x08002510
 80024c4:	08002514 	.word	0x08002514

080024c8 <memset>:
 80024c8:	4603      	mov	r3, r0
 80024ca:	4402      	add	r2, r0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d100      	bne.n	80024d2 <memset+0xa>
 80024d0:	4770      	bx	lr
 80024d2:	f803 1b01 	strb.w	r1, [r3], #1
 80024d6:	e7f9      	b.n	80024cc <memset+0x4>

080024d8 <_init>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	bf00      	nop
 80024dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024de:	bc08      	pop	{r3}
 80024e0:	469e      	mov	lr, r3
 80024e2:	4770      	bx	lr

080024e4 <_fini>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr
